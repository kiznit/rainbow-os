/*
    Copyright (c) 2021, Thierry Tremblay
    All rights reserved.

    Redistribution and use in source and binary forms, with or without
    modification, are permitted provided that the following conditions are met:

    * Redistributions of source code must retain the above copyright notice, this
      list of conditions and the following disclaimer.

    * Redistributions in binary form must reproduce the above copyright notice,
      this list of conditions and the following disclaimer in the documentation
      and/or other materials provided with the distribution.

    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
    DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
    FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
    DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
    SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
    CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
    OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
    OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

#pragma once

#ifndef __has_builtin
#define __has_builtin(x) (false)
#endif

#ifndef __has_feature
#define __has_feature(x) (false)
#endif

namespace std
{
    template <bool B, class T = void>
    struct enable_if
    {
    };

    template <class T>
    struct enable_if<true, T>
    {
        typedef T type;
    };

    template <bool B, class T = void>
    using enable_if_t = typename std::enable_if<B, T>::type;

    template <typename T, T v>
    struct integral_constant
    {
        static constexpr T value = v;
        using value_type = T;
        using type = integral_constant;
        constexpr operator value_type() const { return value; }
        constexpr value_type operator()() const { return value; }
    };

    using true_type = std::integral_constant<bool, true>;
    using false_type = std::integral_constant<bool, false>;

    template <typename T>
    struct is_lvalue_reference : std::false_type
    {
    };

    template <typename T>
    struct is_lvalue_reference<T&> : std::true_type
    {
    };

    template <typename T>
    inline constexpr bool is_lvalue_reference_v = is_lvalue_reference<T>::value;

    template <class T, class U>
    struct is_same : std::false_type
    {
    };

    template <class T>
    struct is_same<T, T> : std::true_type
    {
    };

    template <class T, class U>
    inline constexpr bool is_same_v = std::is_same<T, U>::value;

    template <typename T>
    struct make_signed
    {
        typedef T type;
    };
    template <>
    struct make_signed<char>
    {
        typedef char type;
    };
    template <>
    struct make_signed<short>
    {
        typedef short type;
    };
    template <>
    struct make_signed<int>
    {
        typedef int type;
    };
    template <>
    struct make_signed<long>
    {
        typedef long type;
    };
    template <>
    struct make_signed<long long>
    {
        typedef long long type;
    };
    template <>
    struct make_signed<unsigned char>
    {
        typedef char type;
    };
    template <>
    struct make_signed<unsigned short>
    {
        typedef short type;
    };
    template <>
    struct make_signed<unsigned int>
    {
        typedef int type;
    };
    template <>
    struct make_signed<unsigned long>
    {
        typedef long type;
    };
    template <>
    struct make_signed<unsigned long long>
    {
        typedef long long type;
    };

    template <typename T>
    struct make_unsigned
    {
        typedef T type;
    };
    template <>
    struct make_unsigned<char>
    {
        typedef unsigned char type;
    };
    template <>
    struct make_unsigned<short>
    {
        typedef unsigned short type;
    };
    template <>
    struct make_unsigned<int>
    {
        typedef unsigned int type;
    };
    template <>
    struct make_unsigned<long>
    {
        typedef unsigned long type;
    };
    template <>
    struct make_unsigned<long long>
    {
        typedef unsigned long long type;
    };
    template <>
    struct make_unsigned<unsigned char>
    {
        typedef unsigned char type;
    };
    template <>
    struct make_unsigned<unsigned short>
    {
        typedef unsigned short type;
    };
    template <>
    struct make_unsigned<unsigned int>
    {
        typedef unsigned int type;
    };
    template <>
    struct make_unsigned<unsigned long>
    {
        typedef unsigned long type;
    };
    template <>
    struct make_unsigned<unsigned long long>
    {
        typedef unsigned long long type;
    };

    template <typename T>
    using make_signed_t = typename make_signed<T>::type;
    template <typename T>
    using make_unsigned_t = typename make_unsigned<T>::type;

    template <class T>
    struct remove_const
    {
        typedef T type;
    };
    template <class T>
    struct remove_const<const T>
    {
        typedef T type;
    };

    template <class T>
    struct remove_cv
    {
        typedef T type;
    };
    template <class T>
    struct remove_cv<const T>
    {
        typedef T type;
    };
    template <class T>
    struct remove_cv<volatile T>
    {
        typedef T type;
    };
    template <class T>
    struct remove_cv<const volatile T>
    {
        typedef T type;
    };

    template <class T>
    using remove_cv_t = typename remove_cv<T>::type;

    template <class T>
    struct remove_volatile
    {
        typedef T type;
    };
    template <class T>
    struct remove_volatile<volatile T>
    {
        typedef T type;
    };

    template <typename T>
    struct remove_reference
    {
        typedef T type;
    };
    template <typename T>
    struct remove_reference<T&>
    {
        typedef T type;
    };
    template <typename T>
    struct remove_reference<T&&>
    {
        typedef T type;
    };

    template <class T>
    using remove_reference_t = typename remove_reference<T>::type;

    template <class T>
    struct remove_cvref
    {
        typedef std::remove_cv_t<std::remove_reference_t<T>> type;
    };

    template <class T>
    using remove_cvref_t = typename remove_cvref<T>::type;

    template <class T>
    struct is_void : std::is_same<void, typename std::remove_cv<T>::type>
    {
    };

    ///////////////////////////////////////////////////////////////////////////
    // type_identity
    ///////////////////////////////////////////////////////////////////////////

    template <class T>
    struct type_identity
    {
        using type = T;
    };

    ///////////////////////////////////////////////////////////////////////////
    // add_lvalue_reference / add_rvalue_reference
    ///////////////////////////////////////////////////////////////////////////

    namespace detail
    {
        template <class T>
        auto try_add_lvalue_reference(int) -> std::type_identity<T&>;
        template <class T>
        auto try_add_lvalue_reference(...) -> std::type_identity<T>;

        template <class T>
        auto try_add_rvalue_reference(int) -> std::type_identity<T&&>;
        template <class T>
        auto try_add_rvalue_reference(...) -> std::type_identity<T>;

    } // namespace detail

    template <class T>
    struct add_lvalue_reference : decltype(detail::try_add_lvalue_reference<T>(0))
    {
    };

    template <class T>
    struct add_rvalue_reference : decltype(detail::try_add_rvalue_reference<T>(0))
    {
    };

    ///////////////////////////////////////////////////////////////////////////
    // declval
    ///////////////////////////////////////////////////////////////////////////

    template <class T>
    typename std::add_rvalue_reference<T>::type declval() noexcept;

    ///////////////////////////////////////////////////////////////////////////
    // is_abstract
    ///////////////////////////////////////////////////////////////////////////

#if __has_feature(is_abstract)
    template <class T>
    struct is_abstract : public integral_constant<bool, __is_abstract(T)>
    {
    };
#else
#error Not implemented
#endif

    ///////////////////////////////////////////////////////////////////////////
    // is_assignable
    ///////////////////////////////////////////////////////////////////////////

    template <typename T, typename U, typename = void>
    struct is_assignable : std::false_type
    {
    };

    template <typename T, typename U>
    struct is_assignable<T, U, decltype(std::declval<T>() = std::declval<U>(), void())>
        : std::true_type
    {
    };
    template <class T, class U>
    inline constexpr bool is_assignable_v = is_assignable<T, U>::value;

    ///////////////////////////////////////////////////////////////////////////
    // is_class
    ///////////////////////////////////////////////////////////////////////////

#if __has_feature(is_class) || (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 3)
    template <class T>
    struct is_class : public integral_constant<bool, __is_class(T)>
    {
    };
#else
#error Not implemented
#endif

    ///////////////////////////////////////////////////////////////////////////
    // is_constructible
    ///////////////////////////////////////////////////////////////////////////

    template <class T, class... Args>
    struct is_constructible : std::integral_constant<bool, __is_constructible(T, Args...)>
    {
    };

    template <class T, class... Args>
    struct is_trivially_constructible
        : std::integral_constant<bool, __is_trivially_constructible(T, Args...)>
    {
    };

#if __has_builtin(__is_nothrow_constructible)
    template <class T, class... Args>
    struct is_nothrow_constructible
        : std::integral_constant<bool, __is_nothrow_constructible(T, Args...)>
    {
    };
#else
#error Not implemented

// // mingw doesn't have __is_nothrow_constructible()
// #if defined(__MINGW32__) && !defined(__EXCEPTIONS)
// #define __is_nothrow_constructible(...) __is_constructible(__VA_ARGS__)
// #endif
#endif

    template <class T, class... Args>
    inline constexpr bool is_constructible_v = is_constructible<T, Args...>::value;

    template <class T, class... Args>
    inline constexpr bool is_trivially_constructible_v =
        is_trivially_constructible<T, Args...>::value;

    template <class T, class... Args>
    inline constexpr bool is_nothrow_constructible_v = is_nothrow_constructible<T, Args...>::value;

    ///////////////////////////////////////////////////////////////////////////
    // is_convertible
    ///////////////////////////////////////////////////////////////////////////

#if __has_builtin(__is_convertible_to)
    template <class T1, class T2>
    struct is_convertible
        : public integral_constant<bool, __is_convertible_to(T1, T2) && !is_abstract<T2>::value>
    {
    };
#else
#error Not implemented
#endif

    template <class From, class To>
    inline constexpr bool is_convertible_v = is_convertible<From, To>::value;

    ///////////////////////////////////////////////////////////////////////////
    // is_swapable
    ///////////////////////////////////////////////////////////////////////////

    // Source: http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0185r1.html

    template <class T, class U>
    inline constexpr bool is_swappable_with_v = is_swappable_with<T, U>::value;

    template <class T>
    inline constexpr bool is_swappable_v = is_swappable<T>::value;

    template <class T, class U>
    inline constexpr bool is_nothrow_swappable_with_v = is_nothrow_swappable_with<T, U>::value;

    template <class T>
    inline constexpr bool is_nothrow_swappable_v = is_nothrow_swappable<T>::value;

} // namespace std
