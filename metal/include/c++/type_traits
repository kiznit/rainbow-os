/*
    Copyright (c) 2023, Thierry Tremblay
    All rights reserved.

    Redistribution and use in source and binary forms, with or without
    modification, are permitted provided that the following conditions are met:

    * Redistributions of source code must retain the above copyright notice, this
      list of conditions and the following disclaimer.

    * Redistributions in binary form must reproduce the above copyright notice,
      this list of conditions and the following disclaimer in the documentation
      and/or other materials provided with the distribution.

    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
    DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
    FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
    DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
    SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
    CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
    OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
    OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

#pragma once

#include <cstddef>

#ifndef __has_builtin
#define __has_builtin(x) (false)
#endif

#ifndef __has_feature
#define __has_feature(x) (false)
#endif

namespace std
{
    template <bool B, class T = void>
    struct enable_if
    {
    };

    template <class T>
    struct enable_if<true, T>
    {
        typedef T type;
    };

    template <bool B, class T = void>
    using enable_if_t = typename std::enable_if<B, T>::type;

    template <typename T, T v>
    struct integral_constant
    {
        static constexpr T value = v;
        using value_type = T;
        using type = integral_constant;
        constexpr operator value_type() const { return value; }
        constexpr value_type operator()() const { return value; }
    };

    using true_type = std::integral_constant<bool, true>;
    using false_type = std::integral_constant<bool, false>;

    template <typename T>
    struct is_lvalue_reference : std::false_type
    {
    };

    template <typename T>
    struct is_lvalue_reference<T&> : std::true_type
    {
    };

    template <typename T>
    inline constexpr bool is_lvalue_reference_v = is_lvalue_reference<T>::value;

    template <class T, class U>
    struct is_same : std::false_type
    {
    };

    template <class T>
    struct is_same<T, T> : std::true_type
    {
    };

    template <class T, class U>
    inline constexpr bool is_same_v = std::is_same<T, U>::value;

    template <typename T>
    struct make_signed
    {
        typedef T type;
    };
    template <>
    struct make_signed<char>
    {
        typedef char type;
    };
    template <>
    struct make_signed<short>
    {
        typedef short type;
    };
    template <>
    struct make_signed<int>
    {
        typedef int type;
    };
    template <>
    struct make_signed<long>
    {
        typedef long type;
    };
    template <>
    struct make_signed<long long>
    {
        typedef long long type;
    };
    template <>
    struct make_signed<unsigned char>
    {
        typedef char type;
    };
    template <>
    struct make_signed<unsigned short>
    {
        typedef short type;
    };
    template <>
    struct make_signed<unsigned int>
    {
        typedef int type;
    };
    template <>
    struct make_signed<unsigned long>
    {
        typedef long type;
    };
    template <>
    struct make_signed<unsigned long long>
    {
        typedef long long type;
    };

    template <typename T>
    struct make_unsigned
    {
        typedef T type;
    };
    template <>
    struct make_unsigned<char>
    {
        typedef unsigned char type;
    };
    template <>
    struct make_unsigned<short>
    {
        typedef unsigned short type;
    };
    template <>
    struct make_unsigned<int>
    {
        typedef unsigned int type;
    };
    template <>
    struct make_unsigned<long>
    {
        typedef unsigned long type;
    };
    template <>
    struct make_unsigned<long long>
    {
        typedef unsigned long long type;
    };
    template <>
    struct make_unsigned<unsigned char>
    {
        typedef unsigned char type;
    };
    template <>
    struct make_unsigned<unsigned short>
    {
        typedef unsigned short type;
    };
    template <>
    struct make_unsigned<unsigned int>
    {
        typedef unsigned int type;
    };
    template <>
    struct make_unsigned<unsigned long>
    {
        typedef unsigned long type;
    };
    template <>
    struct make_unsigned<unsigned long long>
    {
        typedef unsigned long long type;
    };

    template <typename T>
    using make_signed_t = typename make_signed<T>::type;
    template <typename T>
    using make_unsigned_t = typename make_unsigned<T>::type;

    template <class T>
    struct remove_const
    {
        typedef T type;
    };
    template <class T>
    struct remove_const<const T>
    {
        typedef T type;
    };

    template <class T>
    struct remove_cv
    {
        typedef T type;
    };
    template <class T>
    struct remove_cv<const T>
    {
        typedef T type;
    };
    template <class T>
    struct remove_cv<volatile T>
    {
        typedef T type;
    };
    template <class T>
    struct remove_cv<const volatile T>
    {
        typedef T type;
    };

    template <class T>
    using remove_cv_t = typename remove_cv<T>::type;

    template <class T>
    struct remove_volatile
    {
        typedef T type;
    };

    template <class T>
    struct remove_extent
    {
        typedef T type;
    };

    template <class T>
    struct remove_extent<T[]>
    {
        typedef T type;
    };

    template <class T, std::size_t N>
    struct remove_extent<T[N]>
    {
        typedef T type;
    };

    template <class T>
    using remove_extent_t = typename remove_extent<T>::type;

    template <class T>
    struct remove_volatile<volatile T>
    {
        typedef T type;
    };

    template <typename T>
    struct remove_reference
    {
        typedef T type;
    };
    template <typename T>
    struct remove_reference<T&>
    {
        typedef T type;
    };
    template <typename T>
    struct remove_reference<T&&>
    {
        typedef T type;
    };

    template <class T>
    using remove_reference_t = typename remove_reference<T>::type;

    template <class T>
    struct remove_cvref
    {
        typedef std::remove_cv_t<std::remove_reference_t<T>> type;
    };

    template <class T>
    using remove_cvref_t = typename remove_cvref<T>::type;

    template <class T>
    struct is_void : std::is_same<void, typename std::remove_cv<T>::type>
    {
    };

    template <class T>
    inline constexpr bool is_void_v = is_void<T>::value;

    ///////////////////////////////////////////////////////////////////////////
    // type_identity
    ///////////////////////////////////////////////////////////////////////////

    template <class T>
    struct type_identity
    {
        using type = T;
    };

    ///////////////////////////////////////////////////////////////////////////
    // add_cv / add_const / add_volatile
    ///////////////////////////////////////////////////////////////////////////

    template <class T>
    struct add_cv
    {
        typedef const volatile T type;
    };

    template <class T>
    struct add_const
    {
        typedef const T type;
    };

    template <class T>
    struct add_volatile
    {
        typedef volatile T type;
    };

    ///////////////////////////////////////////////////////////////////////////
    // add_lvalue_reference / add_rvalue_reference
    ///////////////////////////////////////////////////////////////////////////

    namespace detail
    {
        template <class T>
        auto try_add_lvalue_reference(int) -> std::type_identity<T&>;
        template <class T>
        auto try_add_lvalue_reference(...) -> std::type_identity<T>;

        template <class T>
        auto try_add_rvalue_reference(int) -> std::type_identity<T&&>;
        template <class T>
        auto try_add_rvalue_reference(...) -> std::type_identity<T>;

    } // namespace detail

    template <class T>
    struct add_lvalue_reference : decltype(detail::try_add_lvalue_reference<T>(0))
    {
    };

    template <class T>
    struct add_rvalue_reference : decltype(detail::try_add_rvalue_reference<T>(0))
    {
    };

    ///////////////////////////////////////////////////////////////////////////
    // add_pointer
    ///////////////////////////////////////////////////////////////////////////

    namespace detail
    {
        template <class T>
        auto try_add_pointer(int) -> type_identity<typename std::remove_reference<T>::type*>;
        template <class T>
        auto try_add_pointer(...) -> type_identity<T>;

    } // namespace detail

    template <class T>
    struct add_pointer : decltype(detail::try_add_pointer<T>(0))
    {
    };

    ///////////////////////////////////////////////////////////////////////////
    // declval
    ///////////////////////////////////////////////////////////////////////////

    template <class T>
    typename std::add_rvalue_reference<T>::type declval() noexcept;

    ///////////////////////////////////////////////////////////////////////////
    // conditional
    ///////////////////////////////////////////////////////////////////////////

    template <bool B, class T, class F>
    struct conditional
    {
        typedef T type;
    };

    template <class T, class F>
    struct conditional<false, T, F>
    {
        typedef F type;
    };

    template <bool B, class T, class F>
    using conditional_t = typename conditional<B, T, F>::type;

    ///////////////////////////////////////////////////////////////////////////
    // conjunction
    ///////////////////////////////////////////////////////////////////////////

    template <class...>
    struct conjunction : std::true_type
    {
    };

    template <class B1>
    struct conjunction<B1> : B1
    {
    };

    template <class B1, class... Bn>
    struct conjunction<B1, Bn...> : std::conditional_t<bool(B1::value), conjunction<Bn...>, B1>
    {
    };

    template <class... B>
    inline constexpr bool conjunction_v = conjunction<B...>::value;

    ///////////////////////////////////////////////////////////////////////////
    // is_abstract
    ///////////////////////////////////////////////////////////////////////////

#if __has_feature(is_abstract) || defined(__MINGW32__)
    template <class T>
    struct is_abstract : public integral_constant<bool, __is_abstract(T)>
    {
    };
#else
#error Not implemented
#endif

    ///////////////////////////////////////////////////////////////////////////
    // is_integral
    ///////////////////////////////////////////////////////////////////////////

    template <class T>
    struct is_integral : std::integral_constant<bool, std::is_same<bool, typename std::remove_cv<T>::type>::value ||
                                                          std::is_same<char, typename std::remove_cv<T>::type>::value ||
                                                          std::is_same<signed char, typename std::remove_cv<T>::type>::value ||
                                                          std::is_same<unsigned char, typename std::remove_cv<T>::type>::value ||
                                                          std::is_same<wchar_t, typename std::remove_cv<T>::type>::value ||
                                                          std::is_same<char8_t, typename std::remove_cv<T>::type>::value ||
                                                          std::is_same<char16_t, typename std::remove_cv<T>::type>::value ||
                                                          std::is_same<char32_t, typename std::remove_cv<T>::type>::value ||
                                                          std::is_same<short, typename std::remove_cv<T>::type>::value ||
                                                          std::is_same<int, typename std::remove_cv<T>::type>::value ||
                                                          std::is_same<long, typename std::remove_cv<T>::type>::value ||
                                                          std::is_same<long long, typename std::remove_cv<T>::type>::value ||
                                                          std::is_same<unsigned short, typename std::remove_cv<T>::type>::value ||
                                                          std::is_same<unsigned int, typename std::remove_cv<T>::type>::value ||
                                                          std::is_same<unsigned long, typename std::remove_cv<T>::type>::value ||
                                                          std::is_same<unsigned long long, typename std::remove_cv<T>::type>::value>
    {
    };

    template <class T>
    inline constexpr bool is_integral_v = is_integral<T>::value;

    ///////////////////////////////////////////////////////////////////////////
    // is_floating_point
    ///////////////////////////////////////////////////////////////////////////

    template <class T>
    struct is_floating_point : std::integral_constant<bool, std::is_same<float, typename std::remove_cv<T>::type>::value ||
                                                                std::is_same<double, typename std::remove_cv<T>::type>::value ||
                                                                std::is_same<long double, typename std::remove_cv<T>::type>::value>
    {
    };

    template <class T>
    inline constexpr bool is_floating_point_v = is_floating_point<T>::value;

    ///////////////////////////////////////////////////////////////////////////
    // is_arithmetic
    ///////////////////////////////////////////////////////////////////////////

    template <class T>
    struct is_arithmetic : std::integral_constant<bool, std::is_integral<T>::value || std::is_floating_point<T>::value>
    {
    };

    template <class T>
    inline constexpr bool is_arithmetic_v = is_arithmetic<T>::value;

    ///////////////////////////////////////////////////////////////////////////
    // is_signed / is_unsigned
    ///////////////////////////////////////////////////////////////////////////

    namespace detail
    {
        template <typename T, bool = std::is_arithmetic<T>::value>
        struct is_signed : std::integral_constant<bool, T(-1) < T(0)>
        {
        };

        template <typename T>
        struct is_signed<T, false> : std::false_type
        {
        };

        template <typename T, bool = std::is_arithmetic<T>::value>
        struct is_unsigned : std::integral_constant<bool, T(0) < T(-1)>
        {
        };

        template <typename T>
        struct is_unsigned<T, false> : std::false_type
        {
        };
    } // namespace detail

    template <typename T>
    struct is_signed : detail::is_signed<T>::type
    {
    };

    template <typename T>
    struct is_unsigned : detail::is_unsigned<T>::type
    {
    };

    template <class T>
    inline constexpr bool is_signed_v = is_signed<T>::value;

    template <class T>
    inline constexpr bool is_unsigned_v = is_unsigned<T>::value;

    ///////////////////////////////////////////////////////////////////////////
    // is_array
    ///////////////////////////////////////////////////////////////////////////

    template <class T>
    struct is_array : std::false_type
    {
    };

    template <class T>
    struct is_array<T[]> : std::true_type
    {
    };

    template <class T, std::size_t N>
    struct is_array<T[N]> : std::true_type
    {
    };

    template <class T>
    inline constexpr bool is_array_v = is_array<T>::value;

    ///////////////////////////////////////////////////////////////////////////
    // is_class
    ///////////////////////////////////////////////////////////////////////////

#if __has_feature(is_class) || (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 3)
    template <class T>
    struct is_class : public integral_constant<bool, __is_class(T)>
    {
    };
#else
#error Not implemented
#endif

    ///////////////////////////////////////////////////////////////////////////
    // is_base_of
    ///////////////////////////////////////////////////////////////////////////

    namespace details
    {
        template <typename B>
        std::true_type test_pre_ptr_convertible(const volatile B*);
        template <typename>
        std::false_type test_pre_ptr_convertible(const volatile void*);

        template <typename, typename>
        auto test_pre_is_base_of(...) -> std::true_type;
        template <typename B, typename D>
        auto test_pre_is_base_of(int) -> decltype(test_pre_ptr_convertible<B>(static_cast<D*>(nullptr)));
    } // namespace details

    template <typename Base, typename Derived>
    struct is_base_of
        : std::integral_constant<bool, std::is_class<Base>::value &&
                                           std::is_class<Derived>::value&& decltype(details::test_pre_is_base_of<Base, Derived>(
                                               0))::value>
    {
    };

    template <class Base, class Derived>
    inline constexpr bool is_base_of_v = is_base_of<Base, Derived>::value;

    ///////////////////////////////////////////////////////////////////////////
    // is_const
    ///////////////////////////////////////////////////////////////////////////

    template <class T>
    struct is_const : std::false_type
    {
    };
    template <class T>
    struct is_const<const T> : std::true_type
    {
    };

    ///////////////////////////////////////////////////////////////////////////
    // is_enum
    ///////////////////////////////////////////////////////////////////////////

#if __has_feature(is_enum) || defined(__MINGW32__)
    template <class T>
    struct is_enum : public integral_constant<bool, __is_enum(T)>
    {
    };
#else
#error Not implemented
#endif

    ///////////////////////////////////////////////////////////////////////////
    // is_reference
    ///////////////////////////////////////////////////////////////////////////

    template <class T>
    struct is_reference : std::false_type
    {
    };
    template <class T>
    struct is_reference<T&> : std::true_type
    {
    };
    template <class T>
    struct is_reference<T&&> : std::true_type
    {
    };

    template <typename T>
    inline constexpr bool is_reference_v = is_reference<T>::value;

    ///////////////////////////////////////////////////////////////////////////
    // is_function
    ///////////////////////////////////////////////////////////////////////////

    template <class T>
    struct is_function : std::integral_constant<bool, !std::is_const<const T>::value && !std::is_reference<T>::value>
    {
    };

    ///////////////////////////////////////////////////////////////////////////
    // is_pointer
    ///////////////////////////////////////////////////////////////////////////

    template <class T>
    struct is_pointer : std::false_type
    {
    };

    template <class T>
    struct is_pointer<T*> : std::true_type
    {
    };

    template <class T>
    struct is_pointer<T* const> : std::true_type
    {
    };

    template <class T>
    struct is_pointer<T* volatile> : std::true_type
    {
    };

    template <class T>
    struct is_pointer<T* const volatile> : std::true_type
    {
    };

    ///////////////////////////////////////////////////////////////////////////
    // is_member_pointer
    ///////////////////////////////////////////////////////////////////////////

    template <class T>
    struct is_member_pointer_helper : std::false_type
    {
    };

    template <class T, class U>
    struct is_member_pointer_helper<T U::*> : std::true_type
    {
    };

    template <class T>
    struct is_member_pointer : is_member_pointer_helper<typename std::remove_cv<T>::type>
    {
    };

    ///////////////////////////////////////////////////////////////////////////
    // is_null_pointer
    ///////////////////////////////////////////////////////////////////////////

    template <class T>
    struct is_null_pointer : std::is_same<std::nullptr_t, std::remove_cv_t<T>>
    {
    };

    ///////////////////////////////////////////////////////////////////////////
    // is_scalar
    ///////////////////////////////////////////////////////////////////////////

    template <class T>
    struct is_scalar
        : std::integral_constant<bool, std::is_arithmetic<T>::value || std::is_enum<T>::value || std::is_pointer<T>::value ||
                                           std::is_member_pointer<T>::value || std::is_null_pointer<T>::value>
    {
    };

    ///////////////////////////////////////////////////////////////////////////
    // is_union
    ///////////////////////////////////////////////////////////////////////////

#if __has_feature(is_union) || defined(__MINGW32__)
    template <class T>
    struct is_union : public integral_constant<bool, __is_union(T)>
    {
    };
#else
#error Not implemented
#endif

    ///////////////////////////////////////////////////////////////////////////
    // is_object
    ///////////////////////////////////////////////////////////////////////////

    template <class T>
    struct is_object : std::integral_constant<bool, std::is_scalar<T>::value || std::is_array<T>::value ||
                                                        std::is_union<T>::value || std::is_class<T>::value>
    {
    };

    template <class T>
    inline constexpr bool is_object_v = is_object<T>::value;

    ///////////////////////////////////////////////////////////////////////////
    // is_assignable
    ///////////////////////////////////////////////////////////////////////////

#if __has_builtin(__is_assignable) || defined(__MINGW32__)
    template <class T, class U>
    struct is_assignable : std::integral_constant<bool, __is_assignable(T, U)>
    {
    };
#else
#error Not Implemented
#endif

#if __has_builtin(__is_trivially_assignable) || defined(__MINGW32__)
    template <class T, class U>
    struct is_trivially_assignable : std::integral_constant<bool, __is_trivially_assignable(T, U)>
    {
    };
#else
#error Not Implemented
#endif

#if __has_builtin(__is_nothrow_assignable)
    template <class T, class U>
    struct is_nothrow_assignable : std::integral_constant<bool, __is_nothrow_assignable(T, U)>
    {
    };
#elif !__EXCEPTIONS
    template <class T, class U>
    struct is_nothrow_assignable : std::is_assignable<T, U>
    {
    };
#else
#error Not Implemented
#endif

    template <class T, class U>
    inline constexpr bool is_assignable_v = is_assignable<T, U>::value;

    template <class T, class U>
    inline constexpr bool is_trivially_assignable_v = is_trivially_assignable<T, U>::value;

    template <class T, class U>
    inline constexpr bool is_nothrow_assignable_v = is_nothrow_assignable<T, U>::value;

    ///////////////////////////////////////////////////////////////////////////
    // is_copy_assignable
    ///////////////////////////////////////////////////////////////////////////

    template <class T>
    struct is_copy_assignable
        : std::is_assignable<typename std::add_lvalue_reference<T>::type, typename std::add_lvalue_reference<const T>::type>
    {
    };

    template <class T>
    struct is_trivially_copy_assignable : std::is_trivially_assignable<typename std::add_lvalue_reference<T>::type,
                                                                       typename std::add_lvalue_reference<const T>::type>
    {
    };

    template <class T>
    struct is_nothrow_copy_assignable
        : std::is_nothrow_assignable<typename std::add_lvalue_reference<T>::type, typename std::add_lvalue_reference<const T>::type>
    {
    };

    template <class T>
    inline constexpr bool is_copy_assignable_v = is_copy_assignable<T>::value;

    template <class T>
    inline constexpr bool is_trivially_copy_assignable_v = is_trivially_copy_assignable<T>::value;

    template <class T>
    inline constexpr bool is_nothrow_copy_assignable_v = is_nothrow_copy_assignable<T>::value;

    ///////////////////////////////////////////////////////////////////////////
    // is_move_assignable
    ///////////////////////////////////////////////////////////////////////////

    template <class T>
    struct is_move_assignable
        : std::is_assignable<typename std::add_lvalue_reference<T>::type, typename std::add_rvalue_reference<T>::type>
    {
    };

    template <class T>
    struct is_trivially_move_assignable
        : std::is_trivially_assignable<typename std::add_lvalue_reference<T>::type, typename std::add_rvalue_reference<T>::type>
    {
    };

    template <class T>
    struct is_nothrow_move_assignable
        : std::is_nothrow_assignable<typename std::add_lvalue_reference<T>::type, typename std::add_rvalue_reference<T>::type>
    {
    };

    template <class T>
    inline constexpr bool is_move_assignable_v = is_move_assignable<T>::value;

    template <class T>
    inline constexpr bool is_trivially_move_assignable_v = is_trivially_move_assignable<T>::value;

    template <class T>
    inline constexpr bool is_nothrow_move_assignable_v = is_nothrow_move_assignable<T>::value;

    ///////////////////////////////////////////////////////////////////////////
    // is_constructible
    ///////////////////////////////////////////////////////////////////////////

    template <class T, class... Args>
    struct is_constructible : std::integral_constant<bool, __is_constructible(T, Args...)>
    {
    };

    template <class T, class... Args>
    struct is_trivially_constructible : std::integral_constant<bool, __is_trivially_constructible(T, Args...)>
    {
    };

#if __has_builtin(__is_nothrow_constructible)
    template <class T, class... Args>
    struct is_nothrow_constructible : std::integral_constant<bool, __is_nothrow_constructible(T, Args...)>
    {
    };
#elif !__EXCEPTIONS
    template <class T, class... Args>
    struct is_nothrow_constructible : std::is_constructible<T, Args...>
    {
    };
#else
#error Not implemented
#endif

    template <class T, class... Args>
    inline constexpr bool is_constructible_v = is_constructible<T, Args...>::value;

    template <class T, class... Args>
    inline constexpr bool is_trivially_constructible_v = is_trivially_constructible<T, Args...>::value;

    template <class T, class... Args>
    inline constexpr bool is_nothrow_constructible_v = is_nothrow_constructible<T, Args...>::value;

    ///////////////////////////////////////////////////////////////////////////
    // is_default_constructible
    ///////////////////////////////////////////////////////////////////////////

    template <class T>
    struct is_default_constructible : std::is_constructible<T>
    {
    };

    template <class T>
    struct is_trivially_default_constructible : std::is_trivially_constructible<T>
    {
    };

    template <class T>
    struct is_nothrow_default_constructible : std::is_nothrow_constructible<T>
    {
    };

    template <class T>
    inline constexpr bool is_default_constructible_v = is_default_constructible<T>::value;

    template <class T>
    inline constexpr bool is_trivially_default_constructible_v = is_trivially_default_constructible<T>::value;

    template <class T>
    inline constexpr bool is_nothrow_default_constructible_v = is_nothrow_default_constructible<T>::value;

    ///////////////////////////////////////////////////////////////////////////
    // is_copy_constructible
    ///////////////////////////////////////////////////////////////////////////

    template <class T>
    struct is_copy_constructible
        : std::is_constructible<T, typename std::add_lvalue_reference<typename std::add_const<T>::type>::type>
    {
    };

    template <class T>
    struct is_trivially_copy_constructible
        : std::is_trivially_constructible<T, typename std::add_lvalue_reference<typename std::add_const<T>::type>::type>
    {
    };

    template <class T>
    struct is_nothrow_copy_constructible
        : std::is_nothrow_constructible<T, typename std::add_lvalue_reference<typename std::add_const<T>::type>::type>
    {
    };

    template <class T>
    inline constexpr bool is_copy_constructible_v = is_copy_constructible<T>::value;

    template <class T>
    inline constexpr bool is_trivially_copy_constructible_v = is_trivially_copy_constructible<T>::value;

    template <class T>
    inline constexpr bool is_nothrow_copy_constructible_v = is_nothrow_copy_constructible<T>::value;

    ///////////////////////////////////////////////////////////////////////////
    // is_trivially_copyable
    ///////////////////////////////////////////////////////////////////////////

    template <class T>
    struct is_trivially_copyable : public integral_constant<bool, __is_trivially_copyable(T)>
    {
    };

    template <class T>
    inline constexpr bool is_trivially_copyable_v = is_trivially_copyable<T>::value;

    ///////////////////////////////////////////////////////////////////////////
    // is_move_constructible
    ///////////////////////////////////////////////////////////////////////////

    template <class T>
    struct is_move_constructible : std::is_constructible<T, typename std::add_rvalue_reference<T>::type>
    {
    };

    template <class T>
    struct is_trivially_move_constructible : std::is_trivially_constructible<T, typename std::add_rvalue_reference<T>::type>
    {
    };

    template <class T>
    struct is_nothrow_move_constructible : std::is_nothrow_constructible<T, typename std::add_rvalue_reference<T>::type>
    {
    };

    template <class T>
    inline constexpr bool is_move_constructible_v = is_move_constructible<T>::value;

    template <class T>
    inline constexpr bool is_trivially_move_constructible_v = is_trivially_move_constructible<T>::value;

    template <class T>
    inline constexpr bool is_nothrow_move_constructible_v = is_nothrow_move_constructible<T>::value;

    ///////////////////////////////////////////////////////////////////////////
    // is_convertible
    ///////////////////////////////////////////////////////////////////////////

#if __has_builtin(__is_convertible_to)
    template <class T1, class T2>
    struct is_convertible : public integral_constant<bool, __is_convertible_to(T1, T2) && !is_abstract<T2>::value>
    {
    };
#else
    namespace detail
    {
        template <class T>
        auto test_returnable(int) -> decltype(void(static_cast<T (*)()>(nullptr)), std::true_type{});
        template <class>
        auto test_returnable(...) -> std::false_type;

        template <class From, class To>
        auto test_implicitly_convertible(int)
            -> decltype(void(std::declval<void (&)(To)>()(std::declval<From>())), std::true_type{});
        template <class, class>
        auto test_implicitly_convertible(...) -> std::false_type;

    } // namespace detail

    template <class From, class To>
    struct is_convertible : std::integral_constant<bool, (decltype(detail::test_returnable<To>(0))::value &&
                                                          decltype(detail::test_implicitly_convertible<From, To>(0))::value) ||
                                                             (std::is_void<From>::value && std::is_void<To>::value)>
    {
    };
#endif

    template <class From, class To>
    inline constexpr bool is_convertible_v = is_convertible<From, To>::value;

    ///////////////////////////////////////////////////////////////////////////
    // is_destructible
    ///////////////////////////////////////////////////////////////////////////

    namespace detail
    {
        template <typename T, typename = decltype(std::declval<T&>().~T())>
        auto test_is_destructible(int) -> std::true_type;
        template <typename>
        auto test_is_destructible(...) -> std::false_type;

    } // namespace detail

    // Check if T has a destructor
    template <class T, class... Args>
    struct is_destructible
        : std::integral_constant<bool, decltype(detail::test_is_destructible<typename std::remove_extent<T>::type>(0))::value>
    {
    };

    // References are always destructible
    template <class T, class... Args>
    struct is_destructible<T&, Args...> : std::true_type
    {
    };

    // Unbound arrays are not destructible
    template <class T, class... Args>
    struct is_destructible<T[], Args...> : std::false_type
    {
    };

    template <typename T>
    inline constexpr bool is_destructible_v = is_destructible<T>::value;

#if __has_builtin(__is_trivially_destructible)

    template <class T, class... Args>
    struct is_trivially_destructible : std::integral_constant<bool, __is_trivially_destructible(T)>
    {
    };

#else

    template <class T, class... Args>
    struct is_trivially_destructible : std::integral_constant<bool, (is_destructible<T>::value && __has_trivial_destructor(T))>
    {
    };

#endif

    template <typename T>
    inline constexpr bool is_trivially_destructible_v = is_trivially_destructible<T>::value;

    ///////////////////////////////////////////////////////////////////////////
    // is_swappable
    ///////////////////////////////////////////////////////////////////////////

    namespace detail
    {
        namespace swap_adl_tests
        {
            // if swap ADL finds this then it would call std::swap otherwise (same signature)
            struct tag
            {
            };

            template <class T>
            tag swap(T&, T&);
            template <class T, std::size_t N>
            tag swap(T (&a)[N], T (&b)[N]);

            // helper functions to test if an unqualified swap is possible, and if it becomes
            // std::swap
            template <class, class>
            std::false_type can_swap(...) noexcept(false);
            template <class T, class U, class = decltype(swap(std::declval<T&>(), std::declval<U&>()))>
            std::true_type can_swap(int) noexcept(noexcept(swap(std::declval<T&>(), std::declval<U&>())));

            template <class, class>
            std::false_type uses_std(...);
            template <class T, class U>
            std::is_same<decltype(swap(std::declval<T&>(), std::declval<U&>())), tag> uses_std(int);

            template <class T>
            struct is_std_swap_noexcept : std::integral_constant<bool, std::is_nothrow_move_constructible<T>::value &&
                                                                           std::is_nothrow_move_assignable<T>::value>
            {
            };

            template <class T, std::size_t N>
            struct is_std_swap_noexcept<T[N]> : is_std_swap_noexcept<T>
            {
            };

            template <class T, class U>
            struct is_adl_swap_noexcept : std::integral_constant<bool, noexcept(can_swap<T, U>(0))>
            {
            };
        } // namespace swap_adl_tests
    }     // namespace detail

    template <class T, class U = T>
    struct is_swappable
        : std::integral_constant<bool, decltype(detail::swap_adl_tests::can_swap<T, U>(0))::value &&
                                           (!decltype(detail::swap_adl_tests::uses_std<T, U>(0))::value ||
                                            (std::is_move_assignable<T>::value && std::is_move_constructible<T>::value))>
    {
    };

    template <class T, std::size_t N>
    struct is_swappable<T[N], T[N]>
        : std::integral_constant<bool, decltype(detail::swap_adl_tests::can_swap<T[N], T[N]>(0))::value &&
                                           (!decltype(detail::swap_adl_tests::uses_std<T[N], T[N]>(0))::value ||
                                            is_swappable<T, T>::value)>
    {
    };

    template <class T, class U = T>
    struct is_nothrow_swappable
        : std::integral_constant<bool, is_swappable<T, U>::value && ((decltype(detail::swap_adl_tests::uses_std<T, U>(0))::value &&
                                                                      detail::swap_adl_tests::is_std_swap_noexcept<T>::value) ||
                                                                     (!decltype(detail::swap_adl_tests::uses_std<T, U>(0))::value &&
                                                                      detail::swap_adl_tests::is_adl_swap_noexcept<T, U>::value))>
    {
    };

    template <class T>
    inline constexpr bool is_swappable_v = is_swappable<T>::value;

    template <class T>
    inline constexpr bool is_nothrow_swappable_v = is_nothrow_swappable<T>::value;

    ///////////////////////////////////////////////////////////////////////////
    // decay
    ///////////////////////////////////////////////////////////////////////////

    template <class T>
    struct decay
    {
    private:
        typedef typename std::remove_reference<T>::type U;

    public:
        typedef typename std::conditional<std::is_array<U>::value, typename std::remove_extent<U>::type*,
                                          typename std::conditional<std::is_function<U>::value, typename std::add_pointer<U>::type,
                                                                    typename std::remove_cv<U>::type>::type>::type type;
    };

    template <class T>
    using decay_t = typename decay<T>::type;

    ///////////////////////////////////////////////////////////////////////////
    // underlying_type
    ///////////////////////////////////////////////////////////////////////////

    template <class... T>
    struct common_type
    {
    };

    template <class T>
    struct common_type<T>
    {
        typedef typename decay<T>::type type;
    };

    template <typename T, typename U>
    struct common_type<T, U>
    {
        typedef typename decay<decltype(true ? declval<T>() : declval<U>())>::type type;
    };

    template <typename T, typename U, typename... V>
    struct common_type<T, U, V...>
    {
        typedef typename common_type<typename common_type<T, U>::type, V...>::type type;
    };

    template <class... T>
    using common_type_t = typename common_type<T...>::type;

    ///////////////////////////////////////////////////////////////////////////
    // underlying_type
    ///////////////////////////////////////////////////////////////////////////

    template <typename _Tp, bool = is_enum<_Tp>::value>
    struct __underlying_type_impl
    {
        using type = __underlying_type(_Tp);
    };

    template <typename _Tp>
    struct __underlying_type_impl<_Tp, false>
    {
    };

    template <typename _Tp>
    struct underlying_type : public __underlying_type_impl<_Tp>
    {
    };

    template <class T>
    using underlying_type_t = typename underlying_type<T>::type;

    template <class Enum>
    constexpr std::underlying_type_t<Enum> to_underlying(Enum e) noexcept
    {
        return static_cast<std::underlying_type_t<Enum>>(e);
    }

} // namespace std
